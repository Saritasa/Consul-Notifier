### YamlMime:ManagedReference
items:
- uid: ConsulNotifier.Notifier
  commentId: T:ConsulNotifier.Notifier
  id: Notifier
  parent: ConsulNotifier
  children:
  - ConsulNotifier.Notifier.#ctor(Serilog.ILogger,ConsulNotifier.Providers.IBindingProvider,ConsulNotifier.Providers.ConsulServicesProvider)
  - ConsulNotifier.Notifier.TryNotifyAsync
  langs:
  - csharp
  - vb
  name: Notifier
  nameWithType: Notifier
  fullName: ConsulNotifier.Notifier
  type: Class
  source:
    remote:
      commit:
        author:
          date: 2016-12-09T06:34:25.1124225Z
    id: Notifier
    path: C:/Users/Arthur/Documents/Visual Studio 2017/Projects/ConsulNotifier/src/ConsulNotifier/Notifier.cs
    startLine: 19
  assemblies:
  - ConsulNotifier
  namespace: ConsulNotifier
  summary: "\nConsul notifier\n"
  example: []
  syntax:
    content: public class Notifier
    content.vb: Public Class Notifier
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: ConsulNotifier.Notifier.#ctor(Serilog.ILogger,ConsulNotifier.Providers.IBindingProvider,ConsulNotifier.Providers.ConsulServicesProvider)
  commentId: M:ConsulNotifier.Notifier.#ctor(Serilog.ILogger,ConsulNotifier.Providers.IBindingProvider,ConsulNotifier.Providers.ConsulServicesProvider)
  id: '#ctor(Serilog.ILogger,ConsulNotifier.Providers.IBindingProvider,ConsulNotifier.Providers.ConsulServicesProvider)'
  parent: ConsulNotifier.Notifier
  langs:
  - csharp
  - vb
  name: Notifier(ILogger, IBindingProvider, ConsulServicesProvider)
  nameWithType: Notifier.Notifier(ILogger, IBindingProvider, ConsulServicesProvider)
  fullName: ConsulNotifier.Notifier.Notifier(Serilog.ILogger, ConsulNotifier.Providers.IBindingProvider, ConsulNotifier.Providers.ConsulServicesProvider)
  type: Constructor
  source:
    remote:
      commit:
        author:
          date: 2016-12-09T06:34:25.1124225Z
    id: .ctor
    path: C:/Users/Arthur/Documents/Visual Studio 2017/Projects/ConsulNotifier/src/ConsulNotifier/Notifier.cs
    startLine: 36
  assemblies:
  - ConsulNotifier
  namespace: ConsulNotifier
  summary: "\nCtor.\n"
  example: []
  syntax:
    content: public Notifier(ILogger logger, IBindingProvider bindingProvider, ConsulServicesProvider consulServiceManager)
    content.vb: Public Sub New(logger As ILogger, bindingProvider As IBindingProvider, consulServiceManager As ConsulServicesProvider)
    parameters:
    - id: logger
      type: Serilog.ILogger
    - id: bindingProvider
      type: ConsulNotifier.Providers.IBindingProvider
    - id: consulServiceManager
      type: ConsulNotifier.Providers.ConsulServicesProvider
  overload: ConsulNotifier.Notifier.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ConsulNotifier.Notifier.TryNotifyAsync
  commentId: M:ConsulNotifier.Notifier.TryNotifyAsync
  id: TryNotifyAsync
  parent: ConsulNotifier.Notifier
  langs:
  - csharp
  - vb
  name: TryNotifyAsync()
  nameWithType: Notifier.TryNotifyAsync()
  fullName: ConsulNotifier.Notifier.TryNotifyAsync()
  type: Method
  source:
    remote:
      commit:
        author:
          date: 2016-12-09T06:34:25.1124225Z
    id: TryNotifyAsync
    path: C:/Users/Arthur/Documents/Visual Studio 2017/Projects/ConsulNotifier/src/ConsulNotifier/Notifier.cs
    startLine: 67
  assemblies:
  - ConsulNotifier
  namespace: ConsulNotifier
  summary: "\nNotifiyng consul about new services.\n"
  example: []
  syntax:
    content: public Task<bool> TryNotifyAsync()
    content.vb: Public Function TryNotifyAsync As Task(Of Boolean)
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: ''
  overload: ConsulNotifier.Notifier.TryNotifyAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: ConsulNotifier
  commentId: N:ConsulNotifier
  isExternal: false
  name: ConsulNotifier
  nameWithType: ConsulNotifier
  fullName: ConsulNotifier
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: ConsulNotifier.Notifier.#ctor*
  commentId: Overload:ConsulNotifier.Notifier.#ctor
  isExternal: false
  name: Notifier
  nameWithType: Notifier.Notifier
  fullName: ConsulNotifier.Notifier.Notifier
- uid: Serilog.ILogger
  commentId: T:Serilog.ILogger
  parent: Serilog
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Serilog.ILogger
- uid: ConsulNotifier.Providers.IBindingProvider
  commentId: T:ConsulNotifier.Providers.IBindingProvider
  parent: ConsulNotifier.Providers
  isExternal: false
  name: IBindingProvider
  nameWithType: IBindingProvider
  fullName: ConsulNotifier.Providers.IBindingProvider
- uid: ConsulNotifier.Providers.ConsulServicesProvider
  commentId: T:ConsulNotifier.Providers.ConsulServicesProvider
  parent: ConsulNotifier.Providers
  isExternal: false
  name: ConsulServicesProvider
  nameWithType: ConsulServicesProvider
  fullName: ConsulNotifier.Providers.ConsulServicesProvider
- uid: Serilog
  commentId: N:Serilog
  isExternal: false
  name: Serilog
  nameWithType: Serilog
  fullName: Serilog
- uid: ConsulNotifier.Providers
  commentId: N:ConsulNotifier.Providers
  isExternal: false
  name: ConsulNotifier.Providers
  nameWithType: ConsulNotifier.Providers
  fullName: ConsulNotifier.Providers
- uid: ConsulNotifier.Notifier.TryNotifyAsync*
  commentId: Overload:ConsulNotifier.Notifier.TryNotifyAsync
  isExternal: false
  name: TryNotifyAsync
  nameWithType: Notifier.TryNotifyAsync
  fullName: ConsulNotifier.Notifier.TryNotifyAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
